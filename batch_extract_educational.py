#!/usr/bin/env python3
"""
–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª—ã—Ö –∫—É—Ä—Å–æ–≤, —É—á–µ–±–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ª–µ–∫—Ü–∏–π.
"""

import argparse
import sys
from pathlib import Path
from typing import List, Dict
from concurrent.futures import ThreadPoolExecutor, as_completed
import json
from datetime import datetime

try:
    from extract_educational_content import EducationalContentExtractor
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å extract_educational_content.py")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)


class BatchEducationalExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(
        self,
        extract_images: bool = True,
        extract_tables: bool = True,
        use_ocr: bool = False,
        image_resolution_scale: float = 2.0,
        max_workers: int = 2,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞.
        
        Args:
            extract_images: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            use_ocr: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR
            image_resolution_scale: –ú–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        """
        self.extractor = EducationalContentExtractor(
            extract_images=extract_images,
            extract_tables=extract_tables,
            use_ocr=use_ocr,
            image_resolution_scale=image_resolution_scale,
        )
        self.max_workers = max_workers
        self.results = []
        self.errors = []
    
    def process_file(
        self,
        pdf_path: Path,
        output_dir: Path,
        formats: List[str],
    ) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞
            formats: –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            print(f"\n{'='*60}")
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path.name}")
            print(f"{'='*60}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc = self.extractor.extract_document(pdf_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            file_output_dir = output_dir / pdf_path.stem
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            results = self.extractor.export_complete_package(
                doc=doc,
                output_dir=file_output_dir,
                base_filename=pdf_path.stem,
                formats=formats,
            )
            
            return {
                "status": "success",
                "file": str(pdf_path),
                "output_dir": str(file_output_dir),
                "results": {k: str(v) for k, v in results.items()},
                "stats": {
                    "texts": len(doc.texts) if hasattr(doc, 'texts') else 0,
                    "tables": len(doc.tables) if hasattr(doc, 'tables') else 0,
                    "pictures": len(doc.pictures) if hasattr(doc, 'pictures') else 0,
                }
            }
            
        except Exception as e:
            error_info = {
                "status": "error",
                "file": str(pdf_path),
                "error": str(e),
            }
            self.errors.append(error_info)
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_path.name}: {e}")
            return error_info
    
    def process_directory(
        self,
        input_dir: Path,
        output_dir: Path,
        formats: List[str],
        recursive: bool = False,
        parallel: bool = False,
    ) -> List[Dict]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        
        Args:
            input_dir: –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            output_dir: –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            formats: –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            recursive: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ PDF
            parallel: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤
        pattern = "**/*.pdf" if recursive else "*.pdf"
        pdf_files = list(input_dir.glob(pattern))
        
        if not pdf_files:
            print(f"‚ö† –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤")
            return []
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        print(f"‚öôÔ∏è  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úì' if parallel else '‚úó'}")
        print(f"üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úì' if recursive else '‚úó'}")
        
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        if parallel and len(pdf_files) > 1:
            results = self._process_parallel(pdf_files, output_dir, formats)
        else:
            results = self._process_sequential(pdf_files, output_dir, formats)
        
        self.results = results
        return results
    
    def _process_sequential(
        self,
        pdf_files: List[Path],
        output_dir: Path,
        formats: List[str],
    ) -> List[Dict]:
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        results = []
        
        for idx, pdf_path in enumerate(pdf_files, 1):
            print(f"\n{'üîπ'*30}")
            print(f"–§–∞–π–ª {idx}/{len(pdf_files)}")
            result = self.process_file(pdf_path, output_dir, formats)
            results.append(result)
        
        return results
    
    def _process_parallel(
        self,
        pdf_files: List[Path],
        output_dir: Path,
        formats: List[str],
    ) -> List[Dict]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        results = []
        
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
            future_to_pdf = {
                executor.submit(
                    self.process_file, pdf_path, output_dir, formats
                ): pdf_path
                for pdf_path in pdf_files
            }
            
            # –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for idx, future in enumerate(as_completed(future_to_pdf), 1):
                pdf_path = future_to_pdf[future]
                try:
                    result = future.result()
                    results.append(result)
                    print(f"\n‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(pdf_files)}: {pdf_path.name}")
                except Exception as e:
                    error_info = {
                        "status": "error",
                        "file": str(pdf_path),
                        "error": str(e),
                    }
                    results.append(error_info)
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ {idx}/{len(pdf_files)}: {pdf_path.name}")
        
        return results
    
    def create_batch_report(self, output_dir: Path) -> Path:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        successful = [r for r in self.results if r.get("status") == "success"]
        failed = [r for r in self.results if r.get("status") == "error"]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_files": len(self.results),
            "successful": len(successful),
            "failed": len(failed),
            "success_rate": f"{len(successful)/len(self.results)*100:.1f}%" if self.results else "0%",
            "results": self.results,
        }
        
        json_path = output_dir / "batch_report.json"
        json_path.write_text(json.dumps(report_data, indent=2, ensure_ascii=False), encoding='utf-8')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Markdown –æ—Ç—á–µ—Ç–∞
        md_content = f"""# –û—Ç—á–µ—Ç –æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ

## –°–≤–æ–¥–∫–∞

- **–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤**: {len(self.results)}
- **–£—Å–ø–µ—à–Ω–æ**: {len(successful)} ‚úì
- **–û—à–∏–±–æ–∫**: {len(failed)} ‚úó
- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å**: {len(successful)/len(self.results)*100:.1f}%

"""
        
        if successful:
            md_content += "## ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
            for result in successful:
                stats = result.get('stats', {})
                md_content += f"### {Path(result['file']).name}\n\n"
                md_content += f"- **–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è**: `{result['output_dir']}`\n"
                md_content += f"- **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: {stats.get('texts', 0)}\n"
                md_content += f"- **–¢–∞–±–ª–∏—Ü—ã**: {stats.get('tables', 0)}\n"
                md_content += f"- **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**: {stats.get('pictures', 0)}\n\n"
        
        if failed:
            md_content += "## ‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏\n\n"
            for result in failed:
                md_content += f"### {Path(result['file']).name}\n\n"
                md_content += f"- **–û—à–∏–±–∫–∞**: `{result.get('error', 'Unknown error')}`\n\n"
        
        md_content += f"""
## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º

"""
        
        if successful:
            total_stats = {
                'texts': sum(r.get('stats', {}).get('texts', 0) for r in successful),
                'tables': sum(r.get('stats', {}).get('tables', 0) for r in successful),
                'pictures': sum(r.get('stats', {}).get('pictures', 0) for r in successful),
            }
            
            md_content += f"""
- **–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤**: {total_stats['texts']}
- **–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü**: {total_stats['tables']}
- **–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: {total_stats['pictures']}
"""
        
        md_content += f"""
## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: Docling Batch Educational Content Extractor
- **JSON –æ—Ç—á–µ—Ç**: `batch_report.json`
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: https://docling-project.github.io/docling/

"""
        
        md_path = output_dir / "BATCH_REPORT.md"
        md_path.write_text(md_content, encoding='utf-8')
        
        print(f"\n‚úì –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
        print(f"   ‚Ä¢ JSON: {json_path}")
        print(f"   ‚Ä¢ Markdown: {md_path}")
        
        return md_path


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ PDF –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  python batch_extract_educational.py input_folder/ -o output/

  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  python batch_extract_educational.py lectures/ -o output/ --recursive

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å 4 –ø–æ—Ç–æ–∫–∞–º–∏
  python batch_extract_educational.py docs/ -o output/ --parallel --workers 4

  # –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å OCR
  python batch_extract_educational.py scanned_docs/ -o output/ --all-formats --ocr
        """
    )
    
    parser.add_argument(
        'input_dir',
        type=str,
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å PDF —Ñ–∞–π–ª–∞–º–∏'
    )
    
    parser.add_argument(
        '-o', '--output',
        type=str,
        required=True,
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    )
    
    parser.add_argument(
        '-f', '--formats',
        nargs='+',
        choices=['markdown', 'html', 'json'],
        default=['markdown'],
        help='–§–æ—Ä–º–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
    )
    
    parser.add_argument(
        '--all-formats',
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã'
    )
    
    parser.add_argument(
        '--recursive',
        action='store_true',
        help='–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ PDF –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö'
    )
    
    parser.add_argument(
        '--parallel',
        action='store_true',
        help='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤'
    )
    
    parser.add_argument(
        '--workers',
        type=int,
        default=2,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)'
    )
    
    parser.add_argument(
        '--no-images',
        action='store_true',
        help='–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    
    parser.add_argument(
        '--no-tables',
        action='store_true',
        help='–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã'
    )
    
    parser.add_argument(
        '--ocr',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR'
    )
    
    parser.add_argument(
        '--image-scale',
        type=float,
        default=2.0,
        help='–ú–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    input_dir = Path(args.input_dir)
    if not input_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}")
        sys.exit(1)
    
    if not input_dir.is_dir():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {input_dir}")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    formats = ['markdown', 'html', 'json'] if args.all_formats else args.formats
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Batch Educational Content Extractor")
    print("=" * 60)
    
    batch_extractor = BatchEducationalExtractor(
        extract_images=not args.no_images,
        extract_tables=not args.no_tables,
        use_ocr=args.ocr,
        image_resolution_scale=args.image_scale,
        max_workers=args.workers,
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    output_dir = Path(args.output)
    
    results = batch_extractor.process_directory(
        input_dir=input_dir,
        output_dir=output_dir,
        formats=formats,
        recursive=args.recursive,
        parallel=args.parallel,
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if results:
        print(f"\n{'='*60}")
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        print("=" * 60)
        
        batch_extractor.create_batch_report(output_dir)
        
        # –ò—Ç–æ–≥–∏
        successful = [r for r in results if r.get("status") == "success"]
        failed = [r for r in results if r.get("status") == "error"]
        
        print(f"\n{'='*60}")
        print("‚úÖ –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {len(successful)} ‚úì")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(failed)} ‚úó")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {len(successful)/len(results)*100:.1f}%")
        print(f"\nüìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output_dir}")
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: {output_dir}/BATCH_REPORT.md")
    else:
        print("\n‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")


if __name__ == "__main__":
    main()

