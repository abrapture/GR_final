#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
—É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ PDF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docling.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏
–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Docling –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.
"""

from pathlib import Path
from typing import Optional
import sys

try:
    from extract_educational_content import EducationalContentExtractor
    from docling.document_converter import DocumentConverter, PdfFormatOption
    from docling.datamodel.pipeline_options import PdfPipelineOptions
    from docling.datamodel.base_models import InputFormat
    from docling_core.types.doc import ImageRefMode, DocItemLabel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install docling")
    sys.exit(1)


def demo_1_basic_extraction():
    """
    –î–µ–º–æ 1: –ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - –ë–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    print("\n" + "="*70)
    print("–î–ï–ú–û 1: –ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    extractor = EducationalContentExtractor(
        extract_images=True,
        extract_tables=True,
        use_ocr=False,
        image_resolution_scale=2.0,
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file = Path("sample.pdf")
    if not test_file.exists():
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    print(f"\nüìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ: {test_file}")
    doc = extractor.extract_document(test_file)
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {doc.name if hasattr(doc, 'name') else 'N/A'}")
    
    if hasattr(doc, 'texts'):
        print(f"   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(doc.texts)}")
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞
        headings = [t for t in doc.texts if hasattr(t, 'label') and 'heading' in str(t.label).lower()]
        if headings[:3]:
            print("   ‚Ä¢ –ü–µ—Ä–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
            for h in headings[:3]:
                print(f"     - {h.text[:60]}...")
    
    if hasattr(doc, 'tables'):
        print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü: {len(doc.tables)}")
    
    if hasattr(doc, 'pictures'):
        print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(doc.pictures)}")
    
    print("\n‚úÖ –î–µ–º–æ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def demo_2_image_modes():
    """
    –î–µ–º–æ 2: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - ImageRefMode.REFERENCED - —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    - ImageRefMode.EMBEDDED - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ base64
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    """
    print("\n" + "="*70)
    print("–î–ï–ú–û 2: –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("="*70)
    
    test_file = Path("sample.pdf")
    if not test_file.exists():
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pipeline —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    pipeline_options = PdfPipelineOptions()
    pipeline_options.generate_picture_images = True
    pipeline_options.images_scale = 2.0
    
    converter = DocumentConverter(
        format_options={
            InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)
        }
    )
    
    print(f"\nüìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {test_file}")
    result = converter.convert(str(test_file))
    doc = result.document
    
    # –†–µ–∂–∏–º 1: REFERENCED - –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÇ –†–µ–∂–∏–º 1: REFERENCED (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)")
    md_referenced = doc.export_to_markdown(image_mode=ImageRefMode.REFERENCED)
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä Markdown: {len(md_referenced)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç–¥–µ–ª—å–Ω—ã–µ PNG —Ñ–∞–π–ª—ã")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Git, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–ª–æ–≥–∏")
    
    # –†–µ–∂–∏–º 2: EMBEDDED - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
    print("\nüì¶ –†–µ–∂–∏–º 2: EMBEDDED (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ base64)")
    html_embedded = doc.export_to_html(image_mode=ImageRefMode.EMBEDDED)
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä HTML: {len(html_embedded)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: base64 –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ, email")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(html_embedded) / len(md_referenced):.1f}x")
    print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π: REFERENCED + HTML EMBEDDED")
    
    print("\n‚úÖ –î–µ–º–æ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def demo_3_quality_comparison():
    """
    –î–µ–º–æ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –†–∞–∑–Ω—ã–µ –º–∞—Å—à—Ç–∞–±—ã (1.0x, 2.0x, 3.0x)
    - –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    """
    print("\n" + "="*70)
    print("–î–ï–ú–û 3: –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("="*70)
    
    test_file = Path("sample.pdf")
    if not test_file.exists():
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    scales = [1.0, 2.0, 3.0]
    
    print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_file}")
    print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤:")
    
    for scale in scales:
        print(f"\nüîç –ú–∞—Å—à—Ç–∞–± {scale}x:")
        
        pipeline_options = PdfPipelineOptions()
        pipeline_options.images_scale = scale
        pipeline_options.generate_picture_images = True
        
        converter = DocumentConverter(
            format_options={
                InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)
            }
        )
        
        result = converter.convert(str(test_file))
        doc = result.document
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        md_content = doc.export_to_markdown()
        
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞: {len(md_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~{scale * 1.5:.1f}s (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if scale == 1.0:
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        elif scale == 2.0:
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞/—Ä–∞–∑–º–µ—Ä–∞ ‚≠ê")
        elif scale == 3.0:
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–∏–∞–≥—Ä–∞–º–º—ã")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   ‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: 2.0x - 2.5x")
    print("   ‚Ä¢ –£—á–µ–±–Ω–∏–∫–∏: 2.0x")
    print("   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç–µ–∂–∏: 3.0x - 4.0x")
    print("   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: 1.0x")
    
    print("\n‚úÖ –î–µ–º–æ 3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def demo_4_document_structure():
    """
    –î–µ–º–æ 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –ò–µ—Ä–∞—Ä—Ö–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    - –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (texts, tables, pictures)
    - –ü–æ—Ä—è–¥–æ–∫ —á—Ç–µ–Ω–∏—è
    """
    print("\n" + "="*70)
    print("–î–ï–ú–û 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    print("="*70)
    
    test_file = Path("sample.pdf")
    if not test_file.exists():
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    extractor = EducationalContentExtractor()
    doc = extractor.extract_document(test_file)
    
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if hasattr(doc, 'texts') and doc.texts:
        print(f"\nüìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ({len(doc.texts)} —à—Ç.):")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        element_types = {}
        for text in doc.texts:
            label = str(text.label) if hasattr(text, 'label') else 'unknown'
            element_types[label] = element_types.get(label, 0) + 1
        
        for label, count in sorted(element_types.items(), key=lambda x: -x[1]):
            print(f"   ‚Ä¢ {label}: {count}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print(f"\nüìë –ò–µ—Ä–∞—Ä—Ö–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
        for idx, text in enumerate(doc.texts[:10]):  # –ü–µ—Ä–≤—ã–µ 10
            if hasattr(text, 'label') and 'heading' in str(text.label).lower():
                level = str(text.label).lower().count('heading')
                indent = "  " * level
                print(f"   {indent}‚Ä¢ {text.text[:50]}...")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü
    if hasattr(doc, 'tables') and doc.tables:
        print(f"\nüìä –¢–∞–±–ª–∏—Ü—ã ({len(doc.tables)} —à—Ç.):")
        for idx, table in enumerate(doc.tables[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3
            print(f"   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ {idx}")
            if hasattr(table, 'num_rows') and hasattr(table, 'num_cols'):
                print(f"     –†–∞–∑–º–µ—Ä: {table.num_rows}x{table.num_cols}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if hasattr(doc, 'pictures') and doc.pictures:
        print(f"\nüñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(doc.pictures)} —à—Ç.):")
        for idx, picture in enumerate(doc.pictures[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
            print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}")
            if hasattr(picture, 'size'):
                print(f"     –†–∞–∑–º–µ—Ä: {picture.size}")
    
    # JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    print(f"\nüìã JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    json_data = doc.export_to_json()
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {len(json_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑")
    
    print("\n‚úÖ –î–µ–º–æ 4 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def demo_5_complete_package():
    """
    –î–µ–º–æ 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    - –°–æ–∑–¥–∞–Ω–∏–µ README
    - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤
    """
    print("\n" + "="*70)
    print("–î–ï–ú–û 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞")
    print("="*70)
    
    test_file = Path("sample.pdf")
    if not test_file.exists():
        print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    output_dir = Path("demo_output")
    
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞:")
    print(f"   ‚Ä¢ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {test_file}")
    print(f"   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    extractor = EducationalContentExtractor(
        extract_images=True,
        extract_tables=True,
        image_resolution_scale=2.0,
    )
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
    doc = extractor.extract_document(test_file)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    results = extractor.export_complete_package(
        doc=doc,
        output_dir=output_dir,
        base_filename=test_file.stem,
        formats=['markdown', 'html', 'json'],
    )
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç:")
    print(f"\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print(f"{output_dir}/")
    for format_name, path in results.items():
        print(f"‚îú‚îÄ‚îÄ {path.name}")
    if results.get('markdown'):
        print(f"‚îî‚îÄ‚îÄ {test_file.stem}_images/")
        print(f"    ‚îî‚îÄ‚îÄ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print(f"   ‚Ä¢ .md - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Git")
    print(f"   ‚Ä¢ .html - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print(f"   ‚Ä¢ .json - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"   ‚Ä¢ README.md - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ")
    
    print("\n‚úÖ –î–µ–º–æ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π."""
    print("\n" + "üéì "*30)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –£–ß–ï–ë–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Docling")
    print("üéì "*30)
    
    demos = [
        ("–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ", demo_1_basic_extraction),
        ("–†–µ–∂–∏–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", demo_2_image_modes),
        ("–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", demo_3_quality_comparison),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", demo_4_document_structure),
        ("–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç", demo_5_complete_package),
    ]
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    for idx, (name, _) in enumerate(demos, 1):
        print(f"  {idx}. {name}")
    print(f"  0. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ (0-5): ").strip()
        
        if choice == "0":
            for name, demo_func in demos:
                demo_func()
        elif choice.isdigit() and 1 <= int(choice) <= len(demos):
            demos[int(choice) - 1][1]()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
        
        print("\n" + "="*70)
        print("‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´")
        print("="*70)
        print("\nüìñ –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º.:")
        print("   ‚Ä¢ EDUCATIONAL_CONTENT_GUIDE.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
        print("   ‚Ä¢ README.md - –æ–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        print("   ‚Ä¢ https://docling-project.github.io/docling/ - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Docling")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

