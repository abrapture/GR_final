#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ PDF —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
–≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≥—Ä–∞—Ñ–∏–∫–æ–≤, —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Docling:
- Document Converter —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ pipelines
- DoclingDocument —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
- Multimodal export –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import argparse
import sys
from pathlib import Path
from typing import Optional, Dict, List
import json
from datetime import datetime

try:
    from docling.document_converter import DocumentConverter, PdfFormatOption
    from docling.datamodel.base_models import InputFormat
    from docling.datamodel.pipeline_options import (
        PdfPipelineOptions,
        TableFormatOption,
        EasyOcrOptions,
    )
    from docling.datamodel.document import DoclingDocument
    from docling_core.types.doc import (
        ImageRefMode,
        PictureItem,
        TableItem,
        DocItemLabel,
    )
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Docling –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install docling")
    sys.exit(1)


class EducationalContentExtractor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ PDF —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–∞–±–ª–∏—Ü.
    """
    
    def __init__(
        self,
        extract_images: bool = True,
        extract_tables: bool = True,
        use_ocr: bool = False,
        image_resolution_scale: float = 2.0,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞.
        
        Args:
            extract_images: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            extract_tables: –ò–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            use_ocr: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            image_resolution_scale: –ú–∞—Å—à—Ç–∞–± –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—ã—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        """
        self.extract_images = extract_images
        self.extract_tables = extract_tables
        self.image_resolution_scale = image_resolution_scale
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pipeline options –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.pipeline_options = PdfPipelineOptions()
        self.pipeline_options.do_ocr = use_ocr
        self.pipeline_options.do_table_structure = extract_tables
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if extract_images:
            self.pipeline_options.images_scale = image_resolution_scale
            self.pipeline_options.generate_picture_images = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Document Converter —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.converter = DocumentConverter(
            format_options={
                InputFormat.PDF: PdfFormatOption(
                    pipeline_options=self.pipeline_options
                )
            }
        )
    
    def extract_document(
        self, 
        pdf_path: Path,
        output_dir: Optional[Path] = None,
    ) -> DoclingDocument:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            DoclingDocument –æ–±—ä–µ–∫—Ç
        """
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path.name}")
        print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úì' if self.extract_images else '‚úó'}")
        print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {'‚úì' if self.extract_tables else '‚úó'}")
        print(f"   OCR: {'‚úì' if self.pipeline_options.do_ocr else '‚úó'}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        result = self.converter.convert(str(pdf_path))
        doc = result.document
        
        print(f"‚úì –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_statistics(doc)
        
        return doc
    
    def _print_statistics(self, doc: DoclingDocument):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É."""
        stats = {
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã": len(doc.texts) if hasattr(doc, 'texts') else 0,
            "–¢–∞–±–ª–∏—Ü—ã": len(doc.tables) if hasattr(doc, 'tables') else 0,
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": len(doc.pictures) if hasattr(doc, 'pictures') else 0,
        }
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
        for key, value in stats.items():
            print(f"   {key}: {value}")
    
    def export_to_markdown_with_images(
        self,
        doc: DoclingDocument,
        output_dir: Path,
        base_filename: str,
    ) -> Path:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Args:
            doc: DoclingDocument –æ–±—ä–µ–∫—Ç
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Markdown —Ñ–∞–π–ª—É
        """
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = output_dir / f"{base_filename}_images"
        images_dir.mkdir(exist_ok=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown —Å embedded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        # ImageRefMode –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        markdown_content = doc.export_to_markdown(
            image_mode=ImageRefMode.REFERENCED,  # –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            # image_mode=ImageRefMode.EMBEDDED,  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: base64 embedded
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
        if self.extract_images and hasattr(doc, 'pictures'):
            self._save_pictures(doc, images_dir, base_filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown
        md_path = output_dir / f"{base_filename}.md"
        md_path.write_text(markdown_content, encoding='utf-8')
        
        print(f"\n‚úì Markdown —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {md_path}")
        print(f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {images_dir}")
        
        return md_path
    
    def _save_pictures(
        self,
        doc: DoclingDocument,
        images_dir: Path,
        base_filename: str,
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        picture_counter = 0
        
        for idx, picture in enumerate(doc.pictures):
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if hasattr(picture, 'image') and picture.image:
                picture_counter += 1
                image_path = images_dir / f"image_{idx+1:03d}.png"
                
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if hasattr(picture.image, 'pil_image'):
                        picture.image.pil_image.save(image_path)
                    elif hasattr(picture, 'data'):
                        image_path.write_bytes(picture.data)
                    
                    print(f"   ‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                except Exception as e:
                    print(f"   ‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx+1}: {e}")
        
        print(f"\n   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {picture_counter}")
    
    def export_to_html_with_images(
        self,
        doc: DoclingDocument,
        output_dir: Path,
        base_filename: str,
    ) -> Path:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (base64).
        
        Args:
            doc: DoclingDocument –æ–±—ä–µ–∫—Ç
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML —Ñ–∞–π–ª—É
        """
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —Å embedded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        html_content = doc.export_to_html(
            image_mode=ImageRefMode.EMBEDDED  # Base64 embedded –¥–ª—è —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ HTML
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        styled_html = self._add_html_styling(html_content, base_filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML
        html_path = output_dir / f"{base_filename}.html"
        html_path.write_text(styled_html, encoding='utf-8')
        
        print(f"\n‚úì HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_path}")
        
        return html_path
    
    def _add_html_styling(self, html_content: str, title: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        styled = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
            background-color: #f5f5f5;
        }}
        .content {{
            background-color: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1, h2, h3, h4, h5, h6 {{
            color: #2c3e50;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }}
        h1 {{ font-size: 2.5em; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        h2 {{ font-size: 2em; border-bottom: 2px solid #3498db; padding-bottom: 8px; }}
        h3 {{ font-size: 1.5em; }}
        img {{
            max-width: 100%;
            height: auto;
            display: block;
            margin: 20px auto;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tr:hover {{
            background-color: #f5f5f5;
        }}
        code {{
            background-color: #f4f4f4;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }}
        pre {{
            background-color: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }}
        blockquote {{
            border-left: 4px solid #3498db;
            padding-left: 20px;
            margin-left: 0;
            color: #555;
            font-style: italic;
        }}
        ul, ol {{
            padding-left: 30px;
        }}
        li {{
            margin: 5px 0;
        }}
        .metadata {{
            color: #7f8c8d;
            font-size: 0.9em;
            margin-bottom: 30px;
            padding: 15px;
            background-color: #ecf0f1;
            border-radius: 5px;
        }}
    </style>
</head>
<body>
    <div class="content">
        <div class="metadata">
            <strong>–î–æ–∫—É–º–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}<br>
            <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {title}<br>
            <strong>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</strong> Docling Educational Content Extractor
        </div>
        {html_content}
    </div>
</body>
</html>"""
        return styled
    
    def export_complete_package(
        self,
        doc: DoclingDocument,
        output_dir: Path,
        base_filename: str,
        formats: List[str] = ["markdown", "html", "json"],
    ) -> Dict[str, Path]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
        
        Args:
            doc: DoclingDocument –æ–±—ä–µ–∫—Ç
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            formats: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Ñ–æ—Ä–º–∞—Ç: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É}
        """
        output_dir.mkdir(parents=True, exist_ok=True)
        results = {}
        
        print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞...")
        
        if "markdown" in formats:
            md_path = self.export_to_markdown_with_images(
                doc, output_dir, base_filename
            )
            results["markdown"] = md_path
        
        if "html" in formats:
            html_path = self.export_to_html_with_images(
                doc, output_dir, base_filename
            )
            results["html"] = html_path
        
        if "json" in formats:
            json_path = self._export_to_json(doc, output_dir, base_filename)
            results["json"] = json_path
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–∫–µ—Ç–µ
        readme_path = self._create_package_readme(
            output_dir, base_filename, doc, results
        )
        results["readme"] = readme_path
        
        print(f"\n‚úì –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: {output_dir}")
        
        return results
    
    def _export_to_json(
        self,
        doc: DoclingDocument,
        output_dir: Path,
        base_filename: str,
    ) -> Path:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ JSON."""
        json_content = doc.export_to_json()
        json_path = output_dir / f"{base_filename}_structure.json"
        json_path.write_text(json_content, encoding='utf-8')
        print(f"‚úì JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {json_path}")
        return json_path
    
    def _create_package_readme(
        self,
        output_dir: Path,
        base_filename: str,
        doc: DoclingDocument,
        results: Dict[str, Path],
    ) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞."""
        readme_content = f"""# –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {base_filename}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏

- **–î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: Docling Educational Content Extractor
- **–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª**: {base_filename}.pdf

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

- **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: {len(doc.texts) if hasattr(doc, 'texts') else 0}
- **–¢–∞–±–ª–∏—Ü—ã**: {len(doc.tables) if hasattr(doc, 'tables') else 0}
- **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**: {len(doc.pictures) if hasattr(doc, 'pictures') else 0}

## –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

"""
        
        for format_name, path in results.items():
            if format_name != "readme":
                readme_content += f"- **{format_name.upper()}**: `{path.name}`\n"
        
        readme_content += f"""
## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

```
{output_dir.name}/
‚îú‚îÄ‚îÄ {base_filename}.md                    # Markdown –≤–µ—Ä—Å–∏—è
‚îú‚îÄ‚îÄ {base_filename}.html                  # HTML –≤–µ—Ä—Å–∏—è (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è)
‚îú‚îÄ‚îÄ {base_filename}_structure.json        # JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚îú‚îÄ‚îÄ {base_filename}_images/               # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ image_001.png
‚îÇ   ‚îú‚îÄ‚îÄ image_002.png
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ README.md                             # –≠—Ç–æ—Ç —Ñ–∞–π–ª
```

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

### Markdown —Ñ–∞–π–ª
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ `{base_filename}_images/`
- –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π (Git)

### HTML —Ñ–∞–π–ª
- –°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (base64)
- –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
- –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è

### JSON —Ñ–∞–π–ª
- –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏–µ—Ä–∞—Ä—Ö–∏—é –∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–§–æ—Ä–º–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞**: PDF
- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OCR**: {'–î–∞' if self.pipeline_options.do_ocr else '–ù–µ—Ç'}
- **–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: {self.image_resolution_scale}x
- **–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü**: {'–í–∫–ª—é—á–µ–Ω–æ' if self.extract_tables else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Docling:
https://docling-project.github.io/docling/
"""
        
        readme_path = output_dir / "README.md"
        readme_path.write_text(readme_content, encoding='utf-8')
        print(f"‚úì README —Å–æ–∑–¥–∞–Ω: {readme_path}")
        
        return readme_path


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ PDF —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ò–∑–≤–ª–µ—á—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ Markdown
  python extract_educational_content.py lecture.pdf -o output/

  # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (MD + HTML + JSON)
  python extract_educational_content.py textbook.pdf -o output/ --all-formats

  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  python extract_educational_content.py scanned.pdf -o output/ --ocr

  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  python extract_educational_content.py presentation.pdf -o output/ --image-scale 3.0

  # –¢–æ–ª—å–∫–æ Markdown –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  python extract_educational_content.py doc.pdf -o output/ --no-images -f markdown
        """
    )
    
    parser.add_argument(
        'input_file',
        type=str,
        help='–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    
    parser.add_argument(
        '-o', '--output',
        type=str,
        required=True,
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    )
    
    parser.add_argument(
        '-f', '--formats',
        nargs='+',
        choices=['markdown', 'html', 'json'],
        default=['markdown'],
        help='–§–æ—Ä–º–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: markdown)'
    )
    
    parser.add_argument(
        '--all-formats',
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã (Markdown + HTML + JSON)'
    )
    
    parser.add_argument(
        '--no-images',
        action='store_true',
        help='–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    
    parser.add_argument(
        '--no-tables',
        action='store_true',
        help='–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã'
    )
    
    parser.add_argument(
        '--ocr',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'
    )
    
    parser.add_argument(
        '--image-scale',
        type=float,
        default=2.0,
        help='–ú–∞—Å—à—Ç–∞–± –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.0)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_path = Path(args.input_file)
    if not input_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        sys.exit(1)
    
    if not input_path.suffix.lower() == '.pdf':
        print(f"‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {input_path} –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å PDF —Ñ–∞–π–ª–æ–º")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    formats = ['markdown', 'html', 'json'] if args.all_formats else args.formats
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Educational Content Extractor")
    print("=" * 60)
    
    extractor = EducationalContentExtractor(
        extract_images=not args.no_images,
        extract_tables=not args.no_tables,
        use_ocr=args.ocr,
        image_resolution_scale=args.image_scale,
    )
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print(f"\nüìö –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    print("=" * 60)
    
    doc = extractor.extract_document(input_path)
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    output_dir = Path(args.output)
    base_filename = input_path.stem
    
    print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    print("=" * 60)
    
    results = extractor.export_complete_package(
        doc=doc,
        output_dir=output_dir,
        base_filename=base_filename,
        formats=formats,
    )
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    print("=" * 60)
    print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for format_name, path in results.items():
        print(f"   ‚Ä¢ {format_name.upper()}: {path.name}")
    
    print(f"\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ README.md –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()

